openapi: 3.0.0
info:
  title: ZConnect API
  description: The base endpoints which are built in to ZConnect 2.
  version: 3.0.0
servers:
- url: http://localhost/api
  variables: {}

security:
  - jwt: []

paths:

  ### ZC2 builtin paths
  /v3/device:
    get:
      tags:
        - Device
      summary: Fetch a list of devices
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/stub'
      responses:
        200:
          $ref: '#/components/responses/DeviceList'
        401:
          $ref: '#/components/responses/Unauthorized'
    post:
      tags:
        - Device
      summary: Create a new device
      requestBody:
        description: A new device definition
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/RemoveIDField'
                - $ref: '#/components/schemas/Device'
      responses:
        200:
          $ref: '#/components/responses/Device'
        401:
          $ref: '#/components/responses/Unauthorized'
        400:
          $ref: '#/components/responses/BadRequest'

  /v3/device/{device_id}:
    get:
      tags:
        - Device
      summary: Fetch a specific device
      parameters:
        - $ref: '#/components/parameters/device_id'
      responses:
        200:
          $ref: '#/components/responses/DeviceList'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
    put: &device_update
      tags:
        - Device
      summary: Update a whole device object
      parameters:
        - $ref: '#/components/parameters/device_id'
      requestBody:
        description: A new device definition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
      responses:
        200:
          $ref: '#/components/responses/Device'
        401:
          $ref: '#/components/responses/Unauthorized'
        400:
          $ref: '#/components/responses/BadRequest'
    patch:
      <<: *device_update # Patch does the same
      summary: Update part of a Device

  /v3/device/{device_id}/event_defs:
    get:
      tags:
        - Device
      summary: Fetch EventDefinitions for a Device
      parameters:
        - $ref: '#/components/parameters/device_id'
        - $ref: '#/components/parameters/ref'
      responses:
        200:
          $ref: '#/components/responses/EventDefinitionList'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - Device
      summary: Create a new EventDefinition on a device
      parameters:
        - $ref: '#/components/parameters/device_id'
      requestBody:
        description: An EventDefinition, withou an id
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventDefinition'
      responses:
        200:
          $ref: '#/components/responses/EventDefinition'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

  /v3/device/{device_id}/event_defs/{event_def_id}:
    get:
      tags:
        - Device
      summary: Fetch a specific EventDefinition for a Device
      parameters:
        - $ref: '#/components/parameters/device_id'
        - $ref: '#/components/parameters/event_def_id'
      responses:
        200:
          $ref: '#/components/responses/EventDefinition'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
    put: &event_def_update
      tags:
        - Device
      summary: Update a whole EventDefinition on a device
      parameters:
        - $ref: '#/components/parameters/device_id'
        - $ref: '#/components/parameters/event_def_id'
      requestBody:
        description: An EventDefinition, withou an id
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventDefinition'
      responses:
        200:
          $ref: '#/components/responses/EventDefinition'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
    patch:
      <<: *event_def_update
      summary: Update part of an EventDefinition on a device

  /v3/device/{device_id}/data:
    get:
      tags:
        - Device
      summary: Get timeseries data from the device
      parameters:
        - $ref: '#/components/parameters/device_id'
        - $ref: '#/components/parameters/start'
        - $ref: '#/components/parameters/end'
        - $ref: '#/components/parameters/resolution'
      responses:
        200:
          $ref: '#/components/responses/TimeSeriesData'
        401:
          $ref: '#/components/responses/Unauthorized'
        400:
          $ref: '#/components/responses/BadRequest'

  /v3/device/{device_id}/data/latest:
    get:
      tags:
        - Device
      summary: Get just the latest values from the device
      parameters:
        - $ref: '#/components/parameters/device_id'
      responses:
        200:
          $ref: '#/components/responses/TimeSeriesData'
        401:
          $ref: '#/components/responses/Unauthorized'
        400:
          $ref: '#/components/responses/BadRequest'

  /v3/device/{device_id}/activity_stream:
    get:
      tags:
        - Device
      summary: Get a Device's activity stream
      description: >
        Activity Streams utilise [Django activity streams](https://github.com/justquick/django-activity-stream) under the hood in
        order to make a W3 "JSON Activity stream" possible in future. This particular API is customised to the needs of ZConnect 2
        and as such follows naming conventions of ZConnect in favour of activity streams.
      parameters:
        - $ref: '#/components/parameters/device_id'
        - $ref: '#/components/parameters/start'
        - $ref: '#/components/parameters/end'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_size'
      responses:
        200:
          $ref: '#/components/responses/ActivityStream'
        401:
          $ref: '#/components/responses/Unauthorized'
        400:
          $ref: '#/components/responses/BadRequest'

  /v3/product:
    get:
      tags:
        - Product
      summary: Fetch a list of products
      parameters:
        - $ref: '#/components/parameters/owner'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/page_size'
        - $ref: '#/components/parameters/stub'
      responses:
        200:
          $ref: '#/components/responses/ProductList'
        401:
          $ref: '#/components/responses/Unauthorized'
    post:
      tags:
        - Product
      summary: Create a new product
      requestBody:
        description: A new product definition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        200:
          $ref: '#/components/responses/Product'
        401:
          $ref: '#/components/responses/Unauthorized'
        400:
          $ref: '#/components/responses/BadRequest'

  /v3/product/{product_id}:
    get:
      tags:
        - Product
      summary: Fetch a specific product
      responses:
        200:
          $ref: '#/components/responses/ProductList'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
    put: &product_update
      tags:
        - Product
      summary: Update a whole product object
      requestBody:
        description: A new product definition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        200:
          $ref: '#/components/responses/Product'
        401:
          $ref: '#/components/responses/Unauthorized'
        400:
          $ref: '#/components/responses/BadRequest'
    patch:
      <<: *product_update # Patch does the same
      summary: Update part of a product

  /v3/organizations/{organization_id}/membership:

    parameters:
      - $ref: '#/components/parameters/organization_id'

    get:
      tags:
        - Organizations
      summary: Get list of Users in an Organization
      responses:
        200:
          $ref: '#/components/responses/OrganizationMembershipList'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

    post:
      tags:
        - Organizations
      summary: Add User to Organization
      requestBody:
        description: A membership description
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  $ref: '#/components/schemas/UserStub'
      responses:
        200:
          $ref: '#/components/responses/OrganizationMembership'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

  /v3/organizations/{organization_id}/membership/{organization_membership_id}:
    parameters:
      - $ref: '#/components/parameters/organization_id'
      - $ref: '#/components/parameters/organization_membership_id'

    get:
      tags:
        - Organizations
      summary: Get info about a User's Organization membership
      responses:
        200:
          $ref: '#/components/responses/OrganizationMembership'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Organizations
      summary: Remove a User from an Organization
      responses:
        204:
          description: Success
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

  /v3/organizations/{organization_id}/user:

    parameters:
      - $ref: '#/components/parameters/organization_id'

    get:
      tags:
        - Organizations
      summary: Get list of Users in an Organization
      responses:
        200:
          $ref: '#/components/responses/OrganizationMembershipList'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

  /v3/organizations/{organization_id}/user/{user_id}:
    parameters:
      - $ref: '#/components/parameters/organization_id'
      - $ref: '#/components/parameters/user_id'

    get:
      tags:
        - Organizations
      summary: Get info about a User's Organization membership, with lookup by User id
      responses:
        200:
          $ref: '#/components/responses/OrganizationMembership'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/OrgMembershipNotFound'


    delete:
      tags:
        - Organizations
      summary: Remove a User from an Organization
      responses:
        204:
          description: Success
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/OrgMembershipNotFound'

  /v3/users:
    get:
      tags:
        - Users
      summary: List users
      parameters:
        - $ref: '#/components/parameters/stub'
      responses:
        200:
          $ref: '#/components/responses/UserList'
        401:
          $ref: '#/components/responses/Unauthorized'
        400:
          $ref: '#/components/responses/BadRequest'

    post:
      tags:
        - Users
      security: []
      summary: Create a new user (can be done by anon)
      requestBody:
        description: A new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          $ref: '#/components/responses/User'
        401:
          $ref: '#/components/responses/Unauthorized'
        400:
          $ref: '#/components/responses/BadRequest'

  /v3/users/{user_id}:
    get:
      tags:
        - Users
      summary: Get a specific user
      parameters:
        - $ref: '#/components/parameters/stub'
        - $ref: '#/components/parameters/user_id'
      responses:
        200:
          $ref: '#/components/responses/User'
        401:
          $ref: '#/components/responses/Unauthorized'
        400:
          $ref: '#/components/responses/BadRequest'

    put: &user_update
      tags:
        - Users
      summary: Update a user
      parameters:
        - $ref: '#/components/parameters/user_id'
      requestBody:
        description: A User object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          $ref: '#/components/responses/User'
        401:
          $ref: '#/components/responses/Unauthorized'
        400:
          $ref: '#/components/responses/BadRequest'

    patch:
      <<: *user_update
      summary: Update part of a User object

  /v3/users/{user_id}/subscriptions:

    parameters:
      - $ref: '#/components/parameters/user_id'

    get:
      tags:
        - Activity subscriptions
      summary: Get all of a user's subscriptions
      description: "Note: not paged!"
      responses:
        200:
          $ref: '#/components/responses/ActivitySubscriptionList'
        401:
          $ref: '#/components/responses/Unauthorized'
        400:
          $ref: '#/components/responses/BadRequest'

    post:
      tags:
        - Activity subscriptions
      summary: Create an Activity Subscription
      requestBody:
        description: The subscription to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivitySubscription'
      responses:
        200:
          $ref: '#/components/responses/ActivitySubscription'
        401:
          $ref: '#/components/responses/Unauthorized'
        400:
          $ref: '#/components/responses/BadRequest'

  /v3/users/{user_id}/subscriptions/{subscription_id}:

    parameters:
      - $ref: '#/components/parameters/user_id'
      - $ref: '#/components/parameters/subscription_id'

    get:
      tags:
        - Activity subscriptions
      summary: Get an Activity Subscription
      responses:
        200:
          $ref: '#/components/responses/ActivitySubscription'
        401:
          $ref: '#/components/responses/Unauthorized'
        400:
          $ref: '#/components/responses/BadRequest'

    put: &activity_subscription_update
      tags:
        - Activity subscriptions
      summary: Update an ActivitySubscription
      requestBody:
        description: The subscription to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivitySubscription'
      responses:
        200:
          $ref: '#/components/responses/ActivitySubscription'
        401:
          $ref: '#/components/responses/Unauthorized'
        400:
          $ref: '#/components/responses/BadRequest'

    patch:
      <<: *activity_subscription_update
      summary: Update part of an ActivitySubscription

    delete:
      tags:
        - Activity subscriptions
      summary: Remove an ActivitySubscription
      responses:
        204:
          description: Success
        401:
          $ref: '#/components/responses/Unauthorized'
        400:
          $ref: '#/components/responses/BadRequest'


  /v3/auth/password/reset:
    post:
      tags:
        - Auth
      summary: Request a password reset
      security: []
      description: This will result in an email being sent to the user
      requestBody:
        description: The account to reset
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: test@example.com
                  description: A User's email address
              required:
                - email
      responses:
        200:
          description: done
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    example: "Password reset e-mail has been sent."
                    type: string
                    description: A message string
        400:
          $ref: '#/components/responses/BadRequest'

  /v3/auth/password/reset/confirm:
    post:
      tags:
        - Auth
      summary: Complete a password reset
      security: []
      description: Sets a new password for the user
      requestBody:
        description: The token and details for password setting
        content:
          application/json:
            schema:
              type: object
              properties:
                uid:
                  type: string
                  description: The user id of the account we're resetting the password on
                token:
                  type: string
                  description: A one-time token provided in the email from /v3/auth/password/reset
                new_password1:
                  type: string
                  description: A new password for the user
                new_password2:
                  type: string
                  description: Confirmation of the new password for the user
      responses:
        200:
          description: done
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    example: "Password has been reset with the new password."
                    type: string
                    description: A message string
        400:
          $ref: '#/components/responses/BadRequest'

  /v3/auth/login:
    post:
      tags:
        - Auth
      summary: Login
      security: []
      requestBody:
        description: A username/password
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: test@example.com
                  description: A User's email address
                password:
                  type: string
                  example: 12345678
                  description: A users's password
      responses:
        200:
          $ref: '#/components/responses/Token'
        401:
          $ref: '#/components/responses/Unauthorized'
        400:
          $ref: '#/components/responses/BadRequest'

  /v3/auth/refresh_token:
    post:
      tags:
        - Auth
      summary: Refresh Token
      description: Get a new JWT if logged in already. Used to keep a login session alive longer.
      security: []
      requestBody:
        description: The previous token
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: The old JWT, with a valid `refresh` claim
      responses:
        200:
          $ref: '#/components/responses/Token'
        401:
          $ref: '#/components/responses/Unauthorized'
        400:
          $ref: '#/components/responses/BadRequest'

  ### end ZC2 builtin paths

components:

  schemas:
    # NOTE: models here often inherit from a Base model
    # which is so that we can update the Base models as
    # ZC2 evolves, without making too many changes to the
    # Underlying models. Endpoints use the inherited versions
    User:
      title: User
      allOf:
        - $ref: '#/components/schemas/BaseUser'

    Group:
      title: Group
      allOf:
        - $ref: '#/components/schemas/BaseGroup'

    Device:
      title: Device
      allOf:
        - $ref: '#/components/schemas/BaseDevice'

    Product:
      title: Product
      allOf:
        - $ref: '#/components/schemas/BaseProduct'

    ### ZC2 builtin schemas
    UserID:
      title: UserID
      allOf:
        - $ref: '#/components/schemas/ObjectID'

    BaseUser: # From Django
      title: User
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractModel'
        - required:
          - id
          - email
          properties:
            id:
              $ref: '#/components/schemas/UserID'
            phone_number:
              type: string
              description: An optional phone number for the user
            email:
              type: string
              description: The email address of the user
              example: a-nu-start@yahoo.com
            first_name:
              type: string
              example: Tobias
              description: The forename(s) of the user
            last_name:
              type: string
              example: Funke
              description: The last name of the user
            username:
              type: string
              example: a-nu-start@yahoo.com
              description: Normally this should be the email address
            password:
              type: string
              example: test_password
              description: A password for the user which will be hashed and stored - only required if the user is able to login directly

    UserStub:
      title: UserStub
      type: object
      properties:
        id:
          type: number
          example: 121
        email:
          type: string
          example: "alice@example.com"

    ActivitySubscriptionID:
      title: ActivitySubscriptionID
      allOf:
        - $ref: '#/components/schemas/ObjectID'

    ActivitySubscription:
      title: ActivitySubscription
      type: object
      description: Stores a definition of a user's subscription to activity stream events on an organization.
      properties:
        id:
          $ref: '#/components/schemas/ObjectID'
        # User is only held internally
        #user:
        #  $ref: '#/components/schemas/UserStub'
        organization:
          $ref: '#/components/schemas/OrganizationStub'
        category:
          type: string
          description: The event category, e.g. `business metrics`
          example: business metrics
        min_severity:
          type: number
          example: 20
          description: A minimum severity which will trigger the notifiction
        type:
          type: string
          enum:
            - sms
            - email
            - push
          description: The type for this subscription. Multiple subscriptions can be made for different mediums

    GroupID:
      title: GroupID
      allOf:
        - $ref: '#/components/schemas/ObjectID'

    BaseGroup:
      title: Group
      type: object
      allOf:
        - $ref: '#/components/schemas/AbstractModel'
        - properties:
            name:
              type: string

    DeviceID:
      title: DeviceID
      allOf:
        - $ref: '#/components/schemas/ObjectID'

    BaseDevice:
      title: Device
      allOf:
      - $ref: '#/components/schemas/AbstractOwnedModel'
      - properties:
          product:
            $ref: '#/components/schemas/ProductStub'
          device_name:
            type: string
          online:
            type: boolean
            description: >
              Is the device online and connected to ZConnect?
              In some cases this is updated periodically (e.g. if the
              device sends data over HTTP). In other cases this is updated
              by connect/disconnect events from an IoT broker.
          last_seen:
            type: string
            format: date-time
            description: The last time that the device sent data. Mainly relevant when `online==False`.
          sensors_current:
            type: object
            description: A key value object containing the latest sensor readings
            example: {"temp": 12.2, "hum": 98} # TODO

    DeviceStub:
      title: DeviceStub
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ObjectID'
        name:
          type: string
          example: "Device120"

    TimeSeriesData:
      title: TimeSeriesData
      type: object
      additionalProperties:
        type: array
        items:
          type: object
          properties:
            id:
              $ref: '#/components/schemas/ObjectID'
            value:
              type: number
            ts:
              $ref: '#/components/schemas/DateTime'

    EventDefID:
      title: EventDefID
      allOf:
        - $ref: '#/components/schemas/ObjectID'

    EventDefinition:
      title: EventDefinition
      description: An event definition
      allOf:
        - $ref: '#/components/schemas/AbstractModel'
        - properties:
            enabled:
              type: boolean
              example: true
              description: Should this event be triggered when the conditions are met?
            condition:
              type: string
              description: A ZC2 event condition string
            actions:
              type: object
              description: An object of event definitions
              example:
                activity:
                  {
                     "category": "business metric",
                     "severity": 30,
                     "notify": true,
                     "verb": "reported",
                     "description": "{device.name} was open for less than 10% of the time",
                  }
            debounce_window:
              type: number
              example: 1000.3
              description: A number of seconds which this event should not trigger again for after being triggered
            scheduled: # TODO, we can probably change or remove this.
              type: boolean
              description: Should be true if the event is scheduled
            single_trigger:
              type: boolean
              default: false
              description: True if the event definition should be destroyed the first time it's triggered. For one time actions.



    ProductID:
      title: ProductID
      allOf:
        - $ref: '#/components/schemas/ObjectID'

    ProductStub:
      title: ProductStub
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ObjectID'
        name:
          type: string
          example: "Lawnmower"

    BaseProduct:
      title: Product
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ProductID'
        version:
          type: string
          description: A string of the Semver
        name:
          type: string
          description: The product name
        iot_name:
          type: string
          description: The product name on the IoT broker (e.g. watson IoT)
        sku:
          type: string
          description: The product SKU
        manufacturer:
          type: string
          description: The produt manufacturer
        url:
          type: string
          description: A product homepage
        support_url:
          type: string
          description: Link to some kind of product help page
        server_side_events:
          type: boolean
          default: false
          description: Should events be triggered from messages on the serverside?

    ProductFirmwareID:
      title: ProductFirmwareID
      allOf:
        - $ref: '#/components/schemas/ObjectID'

    ProductFirmware:
      title: ProductFirmware
      type: object
      allOf:
      - $ref: '#/components/schemas/AbstractModel'
      - required:
          - id
          - product
          - major
          - minor
          - patch
        properties:
          product:
            $ref: '#/components/schemas/ProductID'
          download_url:
            type: string
            description: The url where the image can be downloaded from
          major:
            type: integer
            description: Semver - major
          minor:
            type: integer
            description: Semver - minor
          patch:
            type: integer
            description: Semver - patch
          prerelease:
            type: string
            description: Semver - prerelease
          build:
            type: string
            description: Semver - build id

    UpdateExecution:
      title: UpdateExecution
      type: object
      allOf:
      - $ref: '#/components/schemas/AbstractModel'
      - properties:
          product_firmware:
            $ref: '#/components/schemas/ProductFirmwareID'
          enabled:
            type: boolean
          strategy_class:
            type: string
            description: The name of the class

    LocationID:
      title: LocationID
      allOf:
        - $ref: '#/components/schemas/ObjectID'

    Location:
      title: Location
      type: object
      allOf:
      - $ref: '#/components/schemas/AbstractOwnedModel'
      - properties:
          name:
            type: string
            example: "The office"
          timezone:
            type: string
          latitude:
            type: number
          longitude:
            type: number
          organization:
            type: string
          country:
            type: string
          locality:
            type: string
          region:
            type: string
          pobox:
            type: string
          street_address:
            type: string
          postalcode:
            type: string

    OrganizationID:
      title: OrganizationID
      allOf:
        - $ref: '#/components/schemas/ObjectID'

    OrganizationStub:
      title: OrganizationStub
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ObjectID'
        name:
          type: string
          example: "My cool Organization"

    OrganizationMembershipID:
      title: OrganizationMembershipID
      allOf:
        - $ref: '#/components/schemas/ObjectID'

    OrganizationMembership:
      title: OrganizationMembership
      type: object
      properties:
        id:
          $ref: '#/components/schemas/OrganizationMembershipID'
        user:
          $ref: '#/components/schemas/UserStub'
        created_at:
          type: string
          format: date-time
        is_admin:
          type: boolean

    ObjectID:
      title: ObjectID
      type: number
      example: 12
      description: This will often be numerical, however should be treated as a string.

    AbstractModel:
      title: AbstractModel
      type: object
      required:
        - _id
        - created_at
        - updated_at
      properties:
        id:
          $ref: '#/components/schemas/ObjectID'
        created_at:
          $ref: '#/components/schemas/DateTime'
        updated_at:
          $ref: '#/components/schemas/DateTime'

    AbstractOwnedModel:
      title: AbstractOwnedModel
      allOf:
      - $ref: '#/components/schemas/AbstractModel'
      #- required:
      #  - groups
      #  type: object
      #  properties:
      #    groups:
      #      type: array
      #      items:
      #        $ref: '#/components/schemas/PremissionGroup'

    # Not used at the moment
    PremissionGroup:
      type: object
      properties:
        name:
          type: string
          description: The name of the group
          example: my-great-group

    Action:
      title: Entry on the activity stream
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ObjectID'
        #device - Implied since activities will be listed by device
        verb:
          type: string
          example: "reported"
          description: The verb for the activity (to comply with activity streams)
        description:
          type: string
          example: "Open time was less than 10%"
          description: A message which describes the report. This will be the main content of what happened.
        severity:
          type: number
          example: 20
          description: >
            The severity of the message, used for formatting the display and also when deciding if we should alert users. e.g. 10 = debug, 40 = error.
        created_at:
          type: string
          format: date-time
          example: "1998-01-01T01:00:00Z"
        category:
          type: string
          example: "business metric"
          description: An arbitrary category which is used to categorise and group messages
        notify:
          type: boolean
          example: true
          description: did this action try to send notifications?

    Token:
      title: Access Token
      type: object
      properties:
        token:
          type: string
          description: A JWT with an expiry, to be used as a bearer token

    Error:
      title: Error
      required:
      - detail
      type: object
      properties:
        code:
          type: string
        detail:
          type: string

    DateTime:
      type: string
      description: An ISO8601 string.
      format: date-time
      example: "1970-01-01T00:00:00Z"

    RemoveIDField:
      type: object
      description: "Deletes the id field"
      properties:
        id:
          type: number
          description: The ID field should be left blank when creating the object. If set an error will be thrown.
          example: 0
    ### end ZC2 builtin schemas

  securitySchemes:
    ### ZC2 builtin securitySchemas
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      in: header
      name: JWT auth
      description: >
        ZConnect 2 uses JWT auth with short token lifetimes (circa 5 minutes) in order to log inactive users out quickly when inactive.

        Due to this it's nessesary to call the `token refresh` endpoint to fetch updated tokens on a regular basis. Ordinarily this would be done
        before each normal request. zconnect-js contains examples of what this may look like.
    ### end ZC2 builtin securitySchemas

  parameters:


    ### ZC2 builtin parameters
    user_id:
      name: user_id
      in: query
      description: A valid user_id
      schema:
        $ref: '#/components/schemas/UserID'

    subscription_id:
      name: subscription_id
      in: query
      description: A valid subscription_id
      schema:
        $ref: '#/components/schemas/ActivitySubscriptionID'

    device_id:
      name: device_id
      in: query
      description: A valid device id
      schema:
        $ref: '#/components/schemas/DeviceID'

    organization_id:
      name: organization_id
      in: query
      description: A valid organization id
      schema:
        $ref: '#/components/schemas/OrganizationID'

    organization_membership_id:
      name: organization_membership_id
      in: query
      description: A valid organization_membership_id
      schema:
        $ref: '#/components/schemas/OrganizationMembershipID'

    event_def_id:
      name: event_def_id
      in: query
      description: A valid event_def id
      schema:
        $ref: '#/components/schemas/EventDefID'

    # filtering
    owner:
      name: owner
      in: query
      description: filter by who owns the entities (admin only)
      schema:
        $ref: '#/components/schemas/ObjectID'

    # pagination
    page:
      name: page
      in: query
      description: The page of results to return
      schema:
        type: integer
        default: 0

    page_size:
      name: page_size
      in: query
      description: The number of results per page
      schema:
        type: integer
        default: 10

    # stubbing
    stub:
      name: stub
      in: query
      description: Should results be returned stubbed? Useful for autocomplete results etc.
      schema:
        type: boolean
        default: false

    # time filtering
    start:
      name: start
      in: query
      description: optional start time
      schema:
        $ref: '#/components/schemas/DateTime'

    end:
      name: end
      in: query
      description: optional start time
      schema:
        $ref: '#/components/schemas/DateTime'

    resolution:
      name: resolution
      in: query
      description: optional desired resolution in seconds
      schema:
        type: integer

    # ref filtering for event definitions
    ref:
      name: ref
      in: query
      description: Filter the list of event definitions returned based on the ref. `*` can be used as a wildcard at the start or end of a string, e.g. `?ref=ac_actions:*`
      schema:
        type: string
        #pattern: "*?\w+*?"

    ### end ZC2 builtin parameters

  responses:

    ### ZC2 builtin responses
    PagedResponse: &paged_response
      description: A paged response, override the element type and description
      content:
        application/json:
          schema:
            type: object
            properties: &paged_response_props
              results:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
              count:
                type: integer
                description: The total number of results from all pages
                example: 100
              previous:
                type: string
                description: URL of the previous page
                example: http://testserver/api/v3/devices/?page=2&page_size=2
              next:
                type: string
                description: URL of the next page
                example: http://testserver/api/v3/devices/?page=2&page_size=2

    DeviceList:
      <<: *paged_response
      description: A list of devices
      content:
        application/json:
          schema:
            properties:
              <<: *paged_response_props
              results:
                items:
                  $ref: '#/components/schemas/Device'

    Device:
      description: A device
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Device'

    EventDefinitionList:
      description: A list of EventDefinitions
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/EventDefinition'

    EventDefinition:
      description: An EventDefinition
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EventDefinition'

    TimeSeriesData:
      description: Time series data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TimeSeriesData'

    ActivityStream:
      <<: *paged_response
      description: An activity stream
      content:
        application/json:
          schema:
            properties:
              <<: *paged_response_props
              results:
                items:
                  $ref: '#/components/schemas/Action'

    ProductList:
      <<: *paged_response
      description: A list of products
      content:
        application/json:
          schema:
            properties:
              <<: *paged_response_props
              results:
                items:
                  $ref: '#/components/schemas/Product'

    Product:
      description: A Product
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'

    OrganizationMembershipList:
      <<: *paged_response
      description: A list of organization members
      content:
        application/json:
          schema:
            properties:
              <<: *paged_response_props
              results:
                items:
                  $ref: '#/components/schemas/OrganizationMembership'

    OrganizationMembership:
      description: An organization membership record
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OrganizationMembership'

    UserList:
      <<: *paged_response
      description: A list of Users
      content:
        application/json:
          schema:
            properties:
              <<: *paged_response_props
              results:
                items:
                  $ref: '#/components/schemas/User'

    User:
      description: A User
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'

    ActivitySubscriptionList:
      description: A list of ActivitySubscriptions
      content:
        application/json:
          schema:
            type: object
            properties:
              results:
                type: array
                items:
                  $ref: '#/components/schemas/ActivitySubscription'

    ActivitySubscription:
      description: An ActivitySubscription
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ActivitySubscription'

    Token:
      description: A login token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Token'

    Unauthorized:
      description: There was an authentication Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            {"code": "Unauthorized", "detail": "You are not authorized to access this"}

    MajorError:
      description: Internal error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            {"code": "exception", "detail": "There was an internal error"}

    BadRequest:
      description: A bad request was made, normally incorrect data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    OrgMembershipNotFound:
      description: The user does not have a membership to this organization, or the organization does not exist, or the user does not exist.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ### end ZC2 builtin responses
